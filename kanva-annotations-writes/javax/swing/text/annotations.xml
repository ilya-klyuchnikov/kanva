<root>
    <item name='javax.swing.text.AbstractDocument.AbstractElement AbstractElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.AbstractElement void dump(java.io.PrintStream, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.AbstractElement void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.AbstractElement void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.BidiElement BidiElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.BidiRootElement BidiRootElement(javax.swing.text.AbstractDocument) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.BranchElement BranchElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.BranchElement void replace(int, int, javax.swing.text.Element[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.DefaultDocumentEvent javax.swing.event.DocumentEvent.EventType access$100(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.LeafElement LeafElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.LeafElement void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.LeafElement void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument.UndoRedoDocumentEvent UndoRedoDocumentEvent(javax.swing.text.AbstractDocument, javax.swing.text.AbstractDocument.DefaultDocumentEvent, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument void dump(java.io.PrintStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument void render(java.lang.Runnable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractDocument void updateBidi(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Document) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Document, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Element) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Element, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter java.lang.String getText(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter boolean inRange(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter void text(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AbstractWriter void writeAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildLocator int getViewIndexAtPoint(float, float, java.awt.Shape) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildLocator boolean intersectsClip(java.awt.Shape, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildLocator boolean intersectsClip(java.awt.Shape, java.awt.Rectangle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildLocator void paintChildren(java.awt.Graphics) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildLocator void setAllocation(java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildState float access$000(javax.swing.text.AsyncBoxView.ChildState) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildState float access$100(javax.swing.text.AsyncBoxView.ChildState) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView.ChildState boolean access$202(javax.swing.text.AsyncBoxView.ChildState, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.AsyncBoxView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView void childAllocation(int, java.awt.Rectangle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView boolean isAfter(int, int, java.awt.Rectangle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView boolean isBefore(int, int, java.awt.Rectangle) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.BoxView void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ComponentView.Invalidator Invalidator(javax.swing.text.ComponentView, java.awt.Component) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ComponentView.Invalidator void propertyChange(java.beans.PropertyChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ComponentView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ComponentView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ComponentView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.CompositeView void setParagraphInsets(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DateFormatter java.lang.Object getAdjustField(int, java.util.Map) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret.Handler void insertUpdate(javax.swing.event.DocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret.Handler void propertyChange(java.beans.PropertyChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret.Handler void removeUpdate(javax.swing.event.DocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void access$100(javax.swing.text.DefaultCaret) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret boolean access$202(javax.swing.text.DefaultCaret, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret int access$302(javax.swing.text.DefaultCaret, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret float access$402(javax.swing.text.DefaultCaret, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret boolean access$500(javax.swing.text.DefaultCaret) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret boolean access$502(javax.swing.text.DefaultCaret, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void adjustCaret(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void adjustCaretAndFocus(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void deinstall(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void install(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void mouseDragged(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void mousePressed(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void mouseReleased(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void moveCaret(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void moveDot(int, javax.swing.text.Position.Bias) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void positionCaret(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void selectWord(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void setDot(int, javax.swing.text.Position.Bias) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultCaret void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit.VerticalPageAction int constrainOffset(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit.VerticalPageAction int getAdjustedY(javax.swing.text.JTextComponent, java.awt.Rectangle, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit.VerticalPageAction int getAdjustedY(javax.swing.text.JTextComponent, java.awt.Rectangle, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void read(java.io.InputStream, javax.swing.text.Document, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void read(java.io.InputStream, javax.swing.text.Document, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void read(java.io.Reader, javax.swing.text.Document, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void read(java.io.Reader, javax.swing.text.Document, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void write(java.io.OutputStream, javax.swing.text.Document, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void write(java.io.OutputStream, javax.swing.text.Document, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultEditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter.DefaultNavigationFilter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter.DefaultNavigationFilter void moveDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter.DefaultNavigationFilter void setDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$200(javax.swing.text.DefaultFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$300(javax.swing.text.DefaultFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$400(javax.swing.text.DefaultFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$500(javax.swing.text.DefaultFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter javax.swing.JFormattedTextField access$600(javax.swing.text.DefaultFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter void moveDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter boolean replace(javax.swing.text.DefaultFormatter.ReplaceHolder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultFormatter void setDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter.DefaultHighlightPainter void paint(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter.DefaultHighlightPainter void paint(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter.DefaultHighlightPainter void paint(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 5'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter javax.swing.text.JTextComponent access$000(javax.swing.text.DefaultHighlighter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter void changeHighlight(java.lang.Object, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultHighlighter void removeHighlight(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.AbstractChangeHandler java.util.List&lt;javax.swing.event.ChangeListener&gt; getStaleListeners(javax.swing.event.ChangeListener) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit AttributeUndoableEdit(javax.swing.text.Element, javax.swing.text.AttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element clone(javax.swing.text.Element, javax.swing.text.Element) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element cloneAsNecessary(javax.swing.text.Element, javax.swing.text.Element, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer void create(int, javax.swing.text.DefaultStyledDocument.ElementSpec[], javax.swing.text.AbstractDocument.DefaultDocumentEvent) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer void create(int, javax.swing.text.DefaultStyledDocument.ElementSpec[], javax.swing.text.AbstractDocument.DefaultDocumentEvent) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer void fractureFrom(javax.swing.text.DefaultStyledDocument.ElementBuffer.ElemChanges[], int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer void insertElement(javax.swing.text.DefaultStyledDocument.ElementSpec) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer void insertFirstContent(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer void insertUpdate(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element join(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.Element, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element join(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.Element, int, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element recreateFracturedElement(javax.swing.text.Element, javax.swing.text.Element) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.ElementBuffer boolean removeElements(javax.swing.text.Element, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.SectionElement SectionElement(javax.swing.text.DefaultStyledDocument) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.StyleChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.StyleChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.StyleChangeUndoableEdit StyleChangeUndoableEdit(javax.swing.text.AbstractDocument.AbstractElement, javax.swing.text.Style) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument.StyleContextChangeHandler void fireStateChanged(javax.swing.text.DefaultStyledDocument, javax.swing.event.ChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument DefaultStyledDocument(javax.swing.text.AbstractDocument.Content, javax.swing.text.StyleContext) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument DefaultStyledDocument(javax.swing.text.StyleContext) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument void create(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument short createSpecsForInsertAfterNewline(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.AttributeSet, java.util.Vector&lt;javax.swing.text.DefaultStyledDocument.ElementSpec&gt;, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument short createSpecsForInsertAfterNewline(javax.swing.text.Element, javax.swing.text.Element, javax.swing.text.AttributeSet, java.util.Vector&lt;javax.swing.text.DefaultStyledDocument.ElementSpec&gt;, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument java.awt.Color getBackground(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument java.awt.Font getFont(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument java.awt.Color getForeground(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument void removeElement(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument void removeElementImpl(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DefaultStyledDocument void setParagraphAttributes(int, int, javax.swing.text.AttributeSet, boolean) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DocumentFilter void insertString(javax.swing.text.DocumentFilter.FilterBypass, int, java.lang.String, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DocumentFilter void remove(javax.swing.text.DocumentFilter.FilterBypass, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.DocumentFilter void replace(javax.swing.text.DocumentFilter.FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ElementIterator.StackItem javax.swing.text.Element access$100(javax.swing.text.ElementIterator.StackItem) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ElementIterator.StackItem int access$200(javax.swing.text.ElementIterator.StackItem) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ElementIterator.StackItem void access$300(javax.swing.text.ElementIterator.StackItem) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ElementIterator ElementIterator(javax.swing.text.Document) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ElementIterator javax.swing.text.Element getDeepestLeaf(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FieldView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FieldView void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FieldView void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FieldView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FieldView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void addDamage(javax.swing.text.FlowView, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void adjustRow(javax.swing.text.FlowView, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy javax.swing.text.View createView(javax.swing.text.FlowView, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy javax.swing.text.View getLogicalView(javax.swing.text.FlowView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void layout(javax.swing.text.FlowView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy int layoutRow(javax.swing.text.FlowView, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.FlowStrategy void reparentViews(javax.swing.text.View, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.LogicalView void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView.LogicalView void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.FlowView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent.RemoveUndo RemoveUndo(javax.swing.text.GapContent, int, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent.RemoveUndo RemoveUndo(javax.swing.text.GapContent, int, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent.UndoPosRef UndoPosRef(javax.swing.text.GapContent, javax.swing.text.GapContent.MarkData) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent int compare(javax.swing.text.GapContent.MarkData, javax.swing.text.GapContent.MarkData) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent int compare(javax.swing.text.GapContent.MarkData, javax.swing.text.GapContent.MarkData) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent void getChars(int, int, javax.swing.text.Segment) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GapContent void updateUndoPositions(java.util.Vector, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 float getAscent(javax.swing.text.GlyphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 int getBoundedPosition(javax.swing.text.GlyphView, int, float, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 float getDescent(javax.swing.text.GlyphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 float getHeight(javax.swing.text.GlyphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 int[] getJustificationData(javax.swing.text.GlyphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 void sync(javax.swing.text.GlyphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter1 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 int getBoundedPosition(javax.swing.text.GlyphView, int, float, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphPainter2 int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphView.GlyphPainter int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphView GlyphView(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.GlyphView void paintTextUsingColor(java.awt.Graphics, java.awt.Shape, java.awt.Color, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.IconView IconView(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.IconView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.IconView void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.IconView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.IconView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter.ExtendedReplaceHolder void resetFromValue(javax.swing.text.InternationalFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter javax.swing.JFormattedTextField access$000(javax.swing.text.InternationalFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter javax.swing.JFormattedTextField access$100(javax.swing.text.InternationalFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter javax.swing.JFormattedTextField access$200(javax.swing.text.InternationalFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter int access$300(javax.swing.text.InternationalFormatter, java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter void access$400(javax.swing.text.InternationalFormatter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter boolean canReplace(javax.swing.text.DefaultFormatter.ReplaceHolder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.InternationalFormatter boolean replace(javax.swing.text.DefaultFormatter.ReplaceHolder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.1 javax.swing.TransferHandler.DropLocation dropLocationForPoint(javax.swing.text.JTextComponent, java.awt.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.1 javax.swing.TransferHandler.DropLocation dropLocationForPoint(javax.swing.text.JTextComponent, java.awt.Point) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.1 java.lang.Object setDropLocation(javax.swing.text.JTextComponent, javax.swing.TransferHandler.DropLocation, java.lang.Object, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.AccessibleJTextComponent AccessibleJTextComponent(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.AccessibleJTextComponent void caretUpdate(javax.swing.event.CaretEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.AccessibleJTextComponent void changedUpdate(javax.swing.event.DocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.AccessibleJTextComponent void insertUpdate(javax.swing.event.DocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.AccessibleJTextComponent void removeUpdate(javax.swing.event.DocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.ComposedTextCaret void install(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.ComposedTextCaret void positionCaret(java.awt.event.MouseEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DefaultKeymap void addActionForKeyStroke(javax.swing.KeyStroke, javax.swing.Action) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DefaultKeymap void addActionForKeyStroke(javax.swing.KeyStroke, javax.swing.Action) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DefaultKeymap javax.swing.Action getAction(javax.swing.KeyStroke) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DefaultKeymap boolean isLocallyDefined(javax.swing.KeyStroke) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DefaultKeymap void removeKeyStrokeBinding(javax.swing.KeyStroke) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DefaultTransferHandler boolean canImport(javax.swing.JComponent, java.awt.datatransfer.DataFlavor[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DropLocation DropLocation(java.awt.Point, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.DropLocation DropLocation(java.awt.Point, int, javax.swing.text.Position.Bias, javax.swing.text.JTextComponent.1) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.MutableCaretEvent MutableCaretEvent(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent.MutableCaretEvent void focusGained(java.awt.event.FocusEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Document access$100(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.SimpleAttributeSet access$1000(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent int access$300(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Position access$500(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Position access$502(javax.swing.text.JTextComponent, javax.swing.text.Position) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Position access$600(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Position access$602(javax.swing.text.JTextComponent, javax.swing.text.Position) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Position access$700(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.Position access$800(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent java.lang.String access$900(javax.swing.text.JTextComponent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void createComposedTextAttribute(int, java.text.AttributedCharacterIterator) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent javax.swing.text.JTextComponent.DropLocation dropLocationForPoint(java.awt.Point) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void exchangeCaret(javax.swing.text.Caret, javax.swing.text.Caret) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void loadKeymap(javax.swing.text.Keymap, javax.swing.text.JTextComponent.KeyBinding[], javax.swing.Action[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void loadKeymap(javax.swing.text.Keymap, javax.swing.text.JTextComponent.KeyBinding[], javax.swing.Action[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void processInputMethodEvent(java.awt.event.InputMethodEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void replaceInputMethodText(java.awt.event.InputMethodEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void setDocument(javax.swing.text.Document) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.JTextComponent void setDropMode(javax.swing.DropMode) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.LabelView LabelView(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter.MaskCharacter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter void append(java.lang.StringBuilder, java.lang.String, int[], java.lang.String, javax.swing.text.MaskFormatter.MaskCharacter[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter int getInvalidOffset(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter java.lang.Object stringToValue(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter java.lang.Object stringToValue(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.MaskFormatter java.lang.String stripLiteralChars(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.NavigationFilter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.NavigationFilter void moveDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.NavigationFilter void setDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView.Row java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView ParagraphView(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView int access$000(javax.swing.text.ParagraphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView float access$100(javax.swing.text.ParagraphView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView float findEdgeSpan(javax.swing.text.View, int, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView int findOffsetToCharactersInString(char[], int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView int getClosestPositionTo(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[], int, int) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ParagraphView void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PasswordView int drawEchoCharacter(java.awt.Graphics, int, int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PasswordView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PasswordView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainDocument void insertComposedTextUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView int drawElement(int, javax.swing.text.Element, java.awt.Graphics, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView int drawElement(int, javax.swing.text.Element, java.awt.Graphics, int, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView void updateDamage(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.PlainView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet.EmptyAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet SimpleAttributeSet(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void addAttribute(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void addAttribute(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void addAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet java.lang.Object getAttribute(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet boolean isDefined(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void removeAttribute(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void removeAttributes(java.util.Enumeration&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void setResolveParent(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.SimpleAttributeSet void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent.RemoveUndo RemoveUndo(javax.swing.text.StringContent, int, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent.RemoveUndo RemoveUndo(javax.swing.text.StringContent, int, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent.StickyPosition StickyPosition(javax.swing.text.StringContent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent.UndoPosRef UndoPosRef(javax.swing.text.StringContent, javax.swing.text.StringContent.PosRec) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent void getChars(int, int, javax.swing.text.Segment) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StringContent void updateUndoPositions(java.util.Vector) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants int getAlignment(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants java.awt.Color getBackground(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants int getBidiLevel(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants java.awt.Component getComponent(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants float getFirstLineIndent(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants java.lang.String getFontFamily(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants int getFontSize(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants java.awt.Color getForeground(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants javax.swing.Icon getIcon(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants float getLeftIndent(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants float getLineSpacing(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants float getRightIndent(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants float getSpaceAbove(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants float getSpaceBelow(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants javax.swing.text.TabSet getTabSet(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants boolean isBold(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants boolean isItalic(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants boolean isStrikeThrough(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants boolean isSubscript(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants boolean isSuperscript(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants boolean isUnderline(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setAlignment(javax.swing.text.MutableAttributeSet, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setBackground(javax.swing.text.MutableAttributeSet, java.awt.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setBidiLevel(javax.swing.text.MutableAttributeSet, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setBold(javax.swing.text.MutableAttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setComponent(javax.swing.text.MutableAttributeSet, java.awt.Component) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setFirstLineIndent(javax.swing.text.MutableAttributeSet, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setFontFamily(javax.swing.text.MutableAttributeSet, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setFontSize(javax.swing.text.MutableAttributeSet, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setForeground(javax.swing.text.MutableAttributeSet, java.awt.Color) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setIcon(javax.swing.text.MutableAttributeSet, javax.swing.Icon) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setItalic(javax.swing.text.MutableAttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setLeftIndent(javax.swing.text.MutableAttributeSet, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setLineSpacing(javax.swing.text.MutableAttributeSet, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setRightIndent(javax.swing.text.MutableAttributeSet, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setSpaceAbove(javax.swing.text.MutableAttributeSet, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setSpaceBelow(javax.swing.text.MutableAttributeSet, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setStrikeThrough(javax.swing.text.MutableAttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setSubscript(javax.swing.text.MutableAttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setSuperscript(javax.swing.text.MutableAttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setTabSet(javax.swing.text.MutableAttributeSet, javax.swing.text.TabSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleConstants void setUnderline(javax.swing.text.MutableAttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.KeyBuilder void addAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.KeyBuilder void initialize(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.KeyBuilder void initialize(java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.KeyBuilder void removeAttributes(java.util.Enumeration) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.KeyBuilder void removeAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, java.lang.String, javax.swing.text.Style) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, javax.swing.text.Style) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.NamedStyle void addAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.NamedStyle void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.NamedStyle void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.SmallAttributeSet SmallAttributeSet(javax.swing.text.StyleContext, javax.swing.text.AttributeSet) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.SmallAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext.SmallAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.MutableAttributeSet createLargeAttributeSet(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.StyleContext.SmallAttributeSet createSmallAttributeSet(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext java.awt.Color getBackground(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext java.awt.Font getFont(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext java.awt.Color getForeground(javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext java.lang.Object getStaticAttributeKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void readAttributeSet(java.io.ObjectInputStream, javax.swing.text.MutableAttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void readAttributes(java.io.ObjectInputStream, javax.swing.text.MutableAttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void registerStaticAttributeKey(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, java.util.Enumeration&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void writeAttributeSet(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void writeAttributeSet(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void writeAttributes(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void writeAttributes(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyleContext void writeObject(java.io.ObjectOutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.AttributeTracker void caretUpdate(javax.swing.event.CaretEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.AttributeTracker void propertyChange(java.beans.PropertyChangeEvent) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.AttributeTracker void updateInputAttributes(int, int, javax.swing.text.JTextComponent) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledDocument getStyledDocument(javax.swing.JEditorPane) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledEditorKit getStyledEditorKit(javax.swing.JEditorPane) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.StyledTextAction void setCharacterAttributes(javax.swing.JEditorPane, javax.swing.text.AttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.StyledTextAction void setParagraphAttributes(javax.swing.JEditorPane, javax.swing.text.AttributeSet, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit.StyledViewFactory javax.swing.text.View create(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit void createInputAttributes(javax.swing.text.Element, javax.swing.text.MutableAttributeSet) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit void deinstall(javax.swing.JEditorPane) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.StyledEditorKit void install(javax.swing.JEditorPane) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView void checkMultiColumnCell(int, int, int, javax.swing.text.View) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView void checkSingleColumnCell(int, int, javax.swing.text.View) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView int getColumnsOccupied(javax.swing.text.View) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView int getRowsOccupied(javax.swing.text.View) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView void layoutColumns(int, int[], int[], javax.swing.SizeRequirements[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TableView void layoutColumns(int, int[], int[], javax.swing.SizeRequirements[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy.AttributedSegment void access$000(javax.swing.text.TextLayoutStrategy.AttributedSegment, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy.AttributedSegment int getRunLimit(java.util.Set&lt;? extends java.text.AttributedCharacterIterator.Attribute&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy.AttributedSegment int getRunStart(java.util.Set&lt;? extends java.text.AttributedCharacterIterator.Attribute&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy.AttributedSegment void setView(javax.swing.text.View) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy javax.swing.text.View createView(javax.swing.text.FlowView, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy int getLimitingOffset(javax.swing.text.View, int, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void layout(javax.swing.text.FlowView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy int layoutRow(javax.swing.text.FlowView, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.TextLayoutStrategy void sync(javax.swing.text.FlowView) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawComposedText(javax.swing.text.View, javax.swing.text.AttributeSet, java.awt.Graphics, int, int, int, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawComposedText(javax.swing.text.View, javax.swing.text.AttributeSet, java.awt.Graphics, int, int, int, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawTabbedText(javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawTabbedText(javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int drawTabbedText(javax.swing.text.View, javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int, int[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getBreakLocation(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getNextVisualPositionFrom(javax.swing.text.View, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getNextWord(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getNextWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getNextWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities javax.swing.text.Element getParagraphElement(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getPositionAbove(javax.swing.text.JTextComponent, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getPositionBelow(javax.swing.text.JTextComponent, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getPrevWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getPrevWordInParagraph(javax.swing.text.JTextComponent, javax.swing.text.Element, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getPreviousWord(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getRowEnd(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getRowStart(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.View, javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int, int[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getWordEnd(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities int getWordStart(javax.swing.text.JTextComponent, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities boolean isComposedTextElement(javax.swing.text.Document, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities boolean isComposedTextElement(javax.swing.text.Element) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.Utilities boolean isLeftToRight(java.awt.Component) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.View void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.View void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.View void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.View int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.View boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WhitespaceBasedBreakIterator void setText(java.text.CharacterIterator) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine void update(javax.swing.event.DocumentEvent, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView.WrappedLine int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView int drawText(javax.swing.text.Element, int, int, java.awt.Graphics, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView int drawText(javax.swing.text.Element, int, int, java.awt.Graphics, int, int) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.WrappedPlainView void updateChildren(javax.swing.event.DocumentEvent, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView.Zone Zone(javax.swing.text.ZoneView, javax.swing.text.Element, javax.swing.text.Position, javax.swing.text.Position) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView.Zone void loadChildren(javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView.Zone void paint(java.awt.Graphics, java.awt.Shape) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView.Zone void paint(java.awt.Graphics, java.awt.Shape) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView.Zone boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView.Zone int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView boolean isZoneLoaded(javax.swing.text.View) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='javax.swing.text.ZoneView void unloadZone(javax.swing.text.View) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
