<root>
    <item name='java.lang.invoke.BoundMethodHandle.Factory BMH'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory BMHSPECIES_DATA_EWI_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory BMHSPECIES_DATA_GFC_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory BMH_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory E_THROWABLE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory JLC_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory JLO_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory JLS_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory MH'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory MH_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory MYSPECIES_DATA_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory SIG_INCIPIT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory SPECIES_DATA'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory SPECIES_DATA_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory SPECIES_PREFIX_NAME'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory SPECIES_PREFIX_PATH'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory TYPES'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory VOID_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt; generateConcreteBMHClass(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle linkConstructor(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle makeCbmhCtor(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeCtors(java.lang.Class&lt;? extends java.lang.invoke.BoundMethodHandle&gt;, java.lang.String, java.lang.invoke.MethodHandle[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeFieldName(java.lang.String, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle makeGetter(java.lang.Class&lt;?&gt;, java.lang.String, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.invoke.MethodHandle[] makeGetters(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodHandle[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String makeSignature(java.lang.String, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Factory java.lang.String typeSig(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData CACHE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData EMPTY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData access$000(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData extendWithIndex(byte)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData extendWithType(char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData get(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.LambdaForm.Name getterName(java.lang.invoke.LambdaForm.Name, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.invoke.BoundMethodHandle.SpeciesData lookupCache(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.SpeciesData java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle.Species_L java.lang.invoke.BoundMethodHandle clone(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle EXTENSION_TYPES'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle SPECIES_DATA'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.invoke.MethodHandle bindSingle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.invoke.BoundMethodHandle.SpeciesData getSpeciesData(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.BoundMethodHandle java.lang.Object internalValues()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.MethodHandle makeDynamicInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.CallSite makeSite(java.lang.invoke.MethodHandle, java.lang.String, java.lang.invoke.MethodType, java.lang.Object, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.CallSite java.lang.invoke.WrongMethodTypeException wrongTargetType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.Accessor java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.Constructor java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.EnsureInitialized INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle.StaticAccessor java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle ACCESSOR_FORMS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_allocateInstance'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_checkBase'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_checkCast'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_constructorMethod'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_ensureInitialized'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_fieldOffset'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_internalMemberName'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_internalMemberNameEnsureInit'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_staticBase'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle NF_staticOffset'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object checkBase(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.MemberName internalMemberName()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberName(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object internalMemberNameEnsureInit(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.String internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm makePreparedFieldLambdaForm(byte, boolean, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle member'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.Object nullCheck(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm preparedFieldLambdaForm(byte, boolean, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.DirectMethodHandle java.lang.invoke.LambdaForm preparedFieldLambdaForm(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric EXTRA_ARGS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle addReturnConversion(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle dispatcher(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle generalInvokerOf(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric initialInvoker'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle makeInitialInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.invoke.MethodHandle makePostDispatchInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokeGeneric java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator.CpPatch java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator BMH'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator CLS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator HOST_CLASS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator LF'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator LFN'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator LFN_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator LF_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator LL_SIG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator MH'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator OBJ'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator OBJARY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.String basicTypeCharSignature(java.lang.String, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator className'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.String constantPlaceholder(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.Object[] cpPatches(byte[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName generateCustomizedCode(java.lang.invoke.LambdaForm, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName generateLambdaFormInterpreterEntryPoint(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName generateNamedFunctionInvoker(java.lang.invoke.MethodTypeForm)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.String getInternalName(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator invokerName'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName loadMethod(byte[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator localsMap'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.String makeDumpableClassName(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator java.lang.invoke.MemberName resolveInvokerMember(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator sourceFile'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.InvokerBytecodeGenerator superName'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers NF_asType'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers NF_checkExactType'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers NF_checkGenericType'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers NF_getCallSiteTarget'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.Object checkGenericType(java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle erasedInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle exactInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle generalInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle makeBasicInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle prepareForGenericCall(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle spreadInvoker(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers spreadInvokers'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers targetType'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.Invokers java.lang.invoke.MethodHandle varargsInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name cloneWithIndex(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.String debugString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.String exprString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name newIndex(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name replaceName(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.invoke.LambdaForm.Name replaceNames(java.lang.invoke.LambdaForm.Name[], java.lang.invoke.LambdaForm.Name[], int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.Name java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.NamedFunction java.lang.String basicTypeSignature()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.NamedFunction java.lang.invoke.MethodHandle computeInvoker(java.lang.invoke.MethodTypeForm)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm.NamedFunction java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm ALL_TYPES'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm CONSTANT_ZERO'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm INTERNED_ARGUMENTS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm PREPARED_FORMS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm addArguments(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm addArguments(int, char...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, char...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] arguments(int, java.lang.Class&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.String basicTypeSignature()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.String basicTypeSignature(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm char[] basicTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm bind(int, java.lang.invoke.BoundMethodHandle.SpeciesData)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm bind(java.lang.invoke.LambdaForm.Name, java.lang.invoke.LambdaForm.Name, java.lang.invoke.BoundMethodHandle.SpeciesData, java.lang.invoke.BoundMethodHandle.SpeciesData)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm bindImmediate(int, char, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name[] buildEmptyNames(int, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.util.Map&lt;java.lang.String,java.lang.invoke.LambdaForm&gt; computeInitialPreparedForms()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm.Name constantZero(int, char)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.invoke.LambdaForm permuteArguments(int, int[], char[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.LambdaForm java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getConstructors(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getFields(java.lang.Class&lt;?&gt;, boolean, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getFields(java.lang.Class&lt;?&gt;, boolean, java.lang.String, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getMembers(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Object, int, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getMethods(java.lang.Class&lt;?&gt;, boolean, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getMethods(java.lang.Class&lt;?&gt;, boolean, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.util.List&lt;java.lang.invoke.MemberName&gt; getNestedTypes(java.lang.Class&lt;?&gt;, boolean, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName[] newMemberBuffer(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolve(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName.Factory java.lang.invoke.MemberName resolveOrFail(byte, java.lang.invoke.MemberName, java.lang.Class&lt;?&gt;, java.lang.Class&lt;NoSuchMemberException&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName CONSTRUCTOR_NAME'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName asConstructor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName asSetter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName asSpecial()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName changeReferenceKind(byte, byte)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.invoke.MemberName getDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.ReflectiveOperationException makeAccessException()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String message()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MemberName java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle NF_reinvokerTarget'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asCollector(java.lang.Class&lt;?&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asFixedArity()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asSpreader(java.lang.Class&lt;?&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle convertArguments(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.String debugString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle form'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.Object internalProperties()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle rebind()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.String standardString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle type'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle viewAsType(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor GETTER_CACHE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor SETTER_CACHE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.ArrayAccessor java.lang.String name(java.lang.Class&lt;?&gt;, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector arrayType'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.AsVarargsCollector java.lang.invoke.MethodHandle viewAsType(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller.1 java.lang.Object computeValue(java.lang.Class)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller.1 java.lang.invoke.MethodHandle computeValue(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle access$000(java.lang.Class)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle makeInjectedInvoker(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle prepareForInvoker(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl.BindCaller java.lang.invoke.MethodHandle restoreToType(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl NF_checkSpreadArgument'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class&lt;?&gt;, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeReferenceIdentity(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;, int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleImpl java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleProxies sun.invoke.WrapperInstance asWrapperInstance(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String addTypeString(java.lang.Object, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.String getNameString(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalArgumentException(java.lang.String, java.lang.Object, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.RuntimeException newIllegalStateException(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.InternalError newInternalError(java.lang.String, java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandleStatics java.lang.InternalError newInternalError(java.lang.Throwable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.1 $SwitchMap$sun$invoke$util$Wrapper'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup IMPL_LOOKUP'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup PUBLIC_LOOKUP'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.String accessFailedMessage(java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle getDirectField(byte, java.lang.Class&lt;?&gt;, java.lang.invoke.MemberName)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MemberName resolveOrFail(byte, java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle restrictReceiver(java.lang.invoke.MemberName, java.lang.invoke.MethodHandle, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectField(java.lang.reflect.Field, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle basicInvoker(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArgument(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup lookup()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.RuntimeException misMatchedTypes(java.lang.String, java.lang.invoke.MethodType, java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup publicLookup()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet java.lang.invoke.MethodType.WeakInternSet.Entry[] newTable(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType.WeakInternSet queue'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType NO_PTYPES'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType erase()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType internTable'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.Invokers invokers()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.IndexOutOfBoundsException newIndexOutOfBoundsException(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType objectOnlyTypes'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parameterList()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType serialPersistentFields'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.String toFieldDescriptorString(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.String toMethodDescriptorString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType unwrap()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodType java.lang.invoke.MethodType unwrapWithNoPrims(java.lang.invoke.MethodType)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodHandle basicInvoker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm erasedType'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.invoke.MethodType erasedType()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm slotToArgTable'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MethodTypeForm java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.MutableCallSite STORE_BARRIER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodType, int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.SimpleMethodHandle java.lang.invoke.SimpleMethodHandle make(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.SimpleMethodHandle java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodType, int[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.invoke.SwitchPoint mcs'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
