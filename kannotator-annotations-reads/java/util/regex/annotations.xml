<root>
    <item name='java.util.regex.ASCII ctype'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.StringBuffer appendTail(java.lang.StringBuffer)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.String quoteReplacement(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher region(int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher reset()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher reset(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.MatchResult toMatchResult()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher useAnchoringBounds(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher usePattern(java.util.regex.Pattern)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher useTransparentBounds(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BitClass java.util.regex.Pattern.BitClass add(int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharProperty java.util.regex.Pattern.CharProperty complement()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharPropertyNames.1 java.util.regex.Pattern.CharProperty make()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharPropertyNames.2 java.util.regex.Pattern.CharProperty make()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharPropertyNames.3 java.util.regex.Pattern.CharProperty make()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharPropertyNames.5 java.util.regex.Pattern.CharProperty make()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharPropertyNames map'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty access$600(int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty bitsOrSingle(java.util.regex.Pattern.BitClass, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty caseInsensitiveRangeFor(int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty charPropertyNodeFor(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty clazz(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.Node createGroup(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.PatternSyntaxException error(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty family(boolean, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String groupname(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty intersection(java.util.regex.Pattern.CharProperty, java.util.regex.Pattern.CharProperty)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Matcher matcher(java.lang.CharSequence)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty newSingle(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.Node newSlice(int[], int, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String produceEquivalentAlternation(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String[] producePermutations(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String quote(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty rangeFor(int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.Node ref(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty setDifference(java.util.regex.Pattern.CharProperty, java.util.regex.Pattern.CharProperty)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty unicodeBlockPropertyFor(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty unicodeScriptPropertyFor(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty union(java.util.regex.Pattern.CharProperty, java.util.regex.Pattern.CharProperty)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.PatternSyntaxException java.lang.String getMessage()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp $VALUES'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp ALNUM'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp ALPHABETIC'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp ASSIGNED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp BLANK'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp CONTROL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp DIGIT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp GRAPH'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp HEX_DIGIT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp IDEOGRAPHIC'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp LETTER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp LOWERCASE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp NONCHARACTER_CODE_POINT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp PRINT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp TITLECASE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp UPPERCASE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp WHITE_SPACE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp WORD'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp aliases'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp posix'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.UnicodeProp java.util.regex.UnicodeProp valueOf(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
