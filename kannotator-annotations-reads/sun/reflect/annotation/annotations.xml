<root>
    <item name='sun.reflect.annotation.AnnotationInvocationHandler.1 java.lang.Object run()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationInvocationHandler.1 java.lang.reflect.Method[] run()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationInvocationHandler java.lang.String memberValueToString(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationInvocationHandler java.lang.String toStringImpl()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser EMPTY_ANNOTATIONS_ARRAY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser EMPTY_ANNOTATION_ARRAY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser sun.reflect.annotation.ExceptionProxy exceptionProxy(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.util.Map&lt;java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;,java.lang.annotation.Annotation&gt; parseAnnotations2(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseBooleanArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseByteArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseCharArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseClassArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseDoubleArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseEnumValue(java.lang.Class&lt;? extends java.lang.Enum&gt;, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseFloatArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseIntArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseLongArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation[] parseParameterAnnotations(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.annotation.Annotation[] parseParameterAnnotations2(byte[], sun.reflect.ConstantPool, java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseShortArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationParser java.lang.Object parseStringArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType.1 java.lang.Object run()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType.1 java.lang.reflect.Method[] run()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType sun.reflect.annotation.AnnotationType getInstance(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType memberDefaults'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType memberTypes'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType members'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationType java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy java.lang.RuntimeException generateException()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy setMember(java.lang.reflect.Method)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.EnumConstantNotPresentExceptionProxy java.lang.RuntimeException generateException()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='sun.reflect.annotation.TypeNotPresentExceptionProxy java.lang.RuntimeException generateException()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
