<root>
    <item name='java.util.regex.Matcher Matcher(java.util.regex.Pattern, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.StringBuffer appendTail(java.lang.StringBuffer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.String group(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.String quoteReplacement(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.lang.String replaceFirst(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Matcher java.util.regex.Matcher usePattern(java.util.regex.Pattern) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.4 boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BackRef boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BackRef boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Begin boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Behind boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BehindS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BehindS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BmpCharProperty boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BnM boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BnM boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BnMS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Bound int check(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Bound boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Branch boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BranchConn boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.BranchConn boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CIBackRef boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CIBackRef boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Caret boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharProperty boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.CharProperty boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Conditional boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Conditional boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Curly boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Curly boolean match0(java.util.regex.Matcher, int, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Curly boolean match1(java.util.regex.Matcher, int, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Curly boolean match2(java.util.regex.Matcher, int, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Curly boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Dollar boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Dollar boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.End boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.First boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.First boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupCurly boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupCurly boolean match0(java.util.regex.Matcher, int, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupCurly boolean match1(java.util.regex.Matcher, int, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupCurly boolean match2(java.util.regex.Matcher, int, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupCurly boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupHead boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupHead boolean matchRef(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupRef boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupRef boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.GroupTail boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.LastMatch boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.LastNode boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.LazyLoop boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.LazyLoop boolean matchInit(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.LazyLoop boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Loop boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Loop boolean matchInit(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Loop boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Neg boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Node boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.NotBehind boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.NotBehindS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.NotBehindS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Pos boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Prolog boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Prolog boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Ques boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Slice boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.SliceI boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.SliceIS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.SliceNode boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.SliceS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.SliceU boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Start boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.Start boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.StartS boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.UnixCaret boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.UnixDollar boolean match(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern.UnixDollar boolean study(java.util.regex.Pattern.TreeInfo) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern int access$300(java.lang.CharSequence, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern boolean access$400(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String composeOneStep(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern int countChars(java.lang.CharSequence, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern int countCodePoints(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern boolean hasBaseCharacter(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern int normalizeCharClass(java.lang.StringBuilder, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String produceEquivalentAlternation(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String[] producePermutations(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.lang.String quote(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern void readObject(java.io.ObjectInputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.util.regex.Pattern java.util.regex.Pattern.CharProperty unicodeBlockPropertyFor(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
